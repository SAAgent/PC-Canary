#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FreeCAD Cube with Fillets Event Handler
Responsible for processing events generated by the hook script and updating evaluation metrics
"""

from typing import Dict, Any, Optional, List

# Event type constants
SCRIPT_INITIALIZED = "script_initialized"
FUNCTION_NOT_FOUND = "function_not_found"
FUNCTION_FOUND = "function_found"
FUNCTION_CALLED = "function_called"
FUNCTION_KEY_WORD_DETECTED = "function_key_word_detected"
ERROR = "error"
HOOK_INSTALLED = "hook_installed"

# Keyword-related constants
CUBE_LENGTH = "cube_length"
CUBE_WIDTH = "cube_width"
CUBE_HEIGHT = "cube_height"
FILLET_RADIUS = "fillet_radius"
HAS_FILLET = "has_fillet"

def execute_python_code(code: str, logger: Any) -> Dict[str, Any]:
    """
    Execute Python code and return the results
    
    Args:
        code: Python code to execute
        logger: Logger object
        
    Returns:
        Dict[str, Any]: Execution result
    """
    try:
        # Create a new namespace to execute the code
        namespace = {}
        exec(code, namespace)
        result = namespace.get('result', None)
        
        if result is None:
            logger.warning("Cube with fillets object not found")
            return None
            
        # Validate result format
        required_keys = [
            CUBE_LENGTH, CUBE_WIDTH, CUBE_HEIGHT, FILLET_RADIUS, HAS_FILLET
        ]
        if not all(key in result for key in required_keys):
            logger.error(f"Result missing required keys: {required_keys}")
            return None
            
        return result
    except Exception as e:
        logger.error(f"Error executing Python code: {str(e)}")
        return None

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from the hook script
    
    Args:
        message: Frida message object
        logger: Logger object
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: List of status updates, or None if no updates
    """
    updates = []
    
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Received event: {event_type}")
            
            if event_type == SCRIPT_INITIALIZED:
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                
            elif event_type == FUNCTION_FOUND:
                logger.info(f"Function found: {payload.get('address', '')}")
                
            elif event_type == FUNCTION_CALLED:
                logger.info(f"Function called: {payload.get('message', '')}")
                # Update first key step status
                updates.append({
                    'status': 'key_step',
                    'index': 1,
                    'name': 'Document saved'
                })
                
            elif event_type == FUNCTION_KEY_WORD_DETECTED:
                # Execute Python code and get results
                code = payload.get('code', '')
                filename = payload.get('filename', '')
                expected_path = task_parameter.get("source_path", "") + task_parameter.get("filename", "")
                logger.info(f"Detected keywords, document path: {filename}, expected document path: {expected_path}")
                
                if filename == expected_path:
                    result = execute_python_code(code, logger)
                    if result:
                        # Check if cube with fillets parameters match expectations
                        expected_cube_length = task_parameter.get(CUBE_LENGTH, 30.0)
                        expected_cube_width = task_parameter.get(CUBE_WIDTH, 30.0)
                        expected_cube_height = task_parameter.get(CUBE_HEIGHT, 30.0)
                        expected_fillet_radius = task_parameter.get(FILLET_RADIUS, 5.0)

                        actual_cube_length = result[CUBE_LENGTH]
                        actual_cube_width = result[CUBE_WIDTH]
                        actual_cube_height = result[CUBE_HEIGHT]
                        actual_fillet_radius = result[FILLET_RADIUS]
                        actual_has_fillet = result[HAS_FILLET]

                        # Log key parameters
                        logger.info(f"Task parameter check: Expected cube length={expected_cube_length}, width={expected_cube_width}, height={expected_cube_height}")
                        logger.info(f"Expected fillets: radius={expected_fillet_radius}")
                        logger.info(f"Actual parameters: Actual cube length={actual_cube_length}, width={actual_cube_width}, height={actual_cube_height}")
                        logger.info(f"Actual fillets: radius={actual_fillet_radius}, has fillets: {actual_has_fillet}")

                        try:
                            # Try to get the numeric part (handle possible units)
                            actual_cube_length_value = float(str(actual_cube_length).split()[0]) if isinstance(actual_cube_length, str) else float(actual_cube_length)
                            actual_cube_width_value = float(str(actual_cube_width).split()[0]) if isinstance(actual_cube_width, str) else float(actual_cube_width)
                            actual_cube_height_value = float(str(actual_cube_height).split()[0]) if isinstance(actual_cube_height, str) else float(actual_cube_height)
                            
                            actual_fillet_radius_value = float(str(actual_fillet_radius).split()[0]) if isinstance(actual_fillet_radius, str) else float(actual_fillet_radius)
                            
                            # Allow a certain error range (0.01%)
                            cube_length_error = abs((actual_cube_length_value - expected_cube_length) / expected_cube_length) <= 0.0001
                            cube_width_error = abs((actual_cube_width_value - expected_cube_width) / expected_cube_width) <= 0.0001
                            cube_height_error = abs((actual_cube_height_value - expected_cube_height) / expected_cube_height) <= 0.0001
                            
                            fillet_radius_error = abs((actual_fillet_radius_value - expected_fillet_radius) / expected_fillet_radius) <= 0.0001
                            
                            has_fillet_correct = actual_has_fillet
                        except Exception as e:
                            logger.error(f"Error comparing parameters: {str(e)}")
                            cube_length_error = False
                            cube_width_error = False
                            cube_height_error = False
                            fillet_radius_error = False
                            has_fillet_correct = False
                        
                        cube_correct = cube_length_error and cube_width_error and cube_height_error
                        fillet_correct = fillet_radius_error and has_fillet_correct
                        
                        if cube_correct and fillet_correct:
                            # Update second key step status
                            updates.append({
                                'status': 'key_step',
                                'index': 2,
                                'name': 'Created cube with fillets and saved successfully'
                            })
                            
                            # Task completed successfully
                            updates.append({
                                'status': 'success',
                                'reason': 'Successfully created a cube with fillets that meets requirements and saved it'
                            })
                        else:
                            logger.warning(f"Parameter validation failed: " + 
                                          f"Cube correct: {cube_correct}, " +
                                          f"Fillets correct: {fillet_correct}")
                
            elif event_type == ERROR:
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Record error event
                updates.append({
                    'status': 'error',
                    'type': error_type,
                    'message': error_message
                })
                
    elif message.get('type') == 'error':
        logger.error(f"Hook script error: {message.get('stack', '')}")
        
        # Record error event
        updates.append({
            'status': 'error',
            'type': 'script_error',
            'message': message.get('stack', 'Unknown error')
        })
    
    return updates if updates else None

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FreeCAD Disk with Threaded Hole Event Handler
Responsible for processing events generated by the hook script and updating evaluation metrics
"""

from typing import Dict, Any, Optional, List

# 事件类型常量
SCRIPT_INITIALIZED = "script_initialized"
FUNCTION_NOT_FOUND = "function_not_found"
FUNCTION_FOUND = "function_found"
FUNCTION_CALLED = "function_called"
FUNCTION_KEY_WORD_DETECTED = "function_key_word_detected"
ERROR = "error"
HOOK_INSTALLED = "hook_installed"

# Keyword-related constants
DISK_RADIUS = "disk_radius"
DISK_HEIGHT = "disk_height"
THREAD_SIZE = "thread_size"
THREAD_DEPTH = "thread_depth"
MODEL_THREAD = "model_thread"
HAS_THREAD = "has_thread"
IS_CENTERED = "is_centered"

def execute_python_code(code: str, logger: Any) -> Dict[str, Any]:
    """
    Execute Python code and return the result
    
    Args:
        code: Python code to execute
        logger: Logger object
        
    Returns:
        Dict[str, Any]: Execution result
    """
    try:
        # Create a new namespace to execute the code
        namespace = {}
        exec(code, namespace)
        result = namespace.get('result', None)
        
        if result is None:
            logger.warning("Disk with threaded hole object not found")
            return None
            
        # Validate result format
        required_keys = [
            DISK_RADIUS, DISK_HEIGHT, THREAD_SIZE, THREAD_DEPTH, 
            MODEL_THREAD, HAS_THREAD, IS_CENTERED
        ]
        if not all(key in result for key in required_keys):
            logger.error(f"Result missing required keys: {required_keys}")
            return None
            
        return result
    except Exception as e:
        logger.error(f"Error executing Python code: {str(e)}")
        return None

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from the hook script
    
    Args:
        message: Frida message object
        logger: Logger object
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: List of status updates, or None if no updates
    """
    updates = []
    
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Event received: {event_type}")
            
            if event_type == SCRIPT_INITIALIZED:
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                
            elif event_type == FUNCTION_FOUND:
                logger.info(f"Function found: {payload.get('address', '')}")
                
            elif event_type == FUNCTION_CALLED:
                logger.info(f"Function called: {payload.get('message', '')}")
                # Update first key step status
                updates.append({
                    'status': 'key_step',
                    'index': 1,
                    'name': 'Document saved'
                })
                
            elif event_type == FUNCTION_KEY_WORD_DETECTED:
                # 执行Python代码并获取结果
                code = payload.get('code', '')
                filename = payload.get('filename', '')
                expected_path = task_parameter.get("source_path", "") + task_parameter.get("filename", "")
                logger.info(f"Detected keywords, document path: {filename}, expected document path: {expected_path}")
                
                if filename == expected_path:
                    result = execute_python_code(code, logger)
                    if result:
                        # Check if disk with threaded hole parameters meet expectations
                        expected_disk_radius = task_parameter.get(DISK_RADIUS, 50.0)
                        expected_disk_height = task_parameter.get(DISK_HEIGHT, 10.0)
                        expected_thread_size = task_parameter.get(THREAD_SIZE, "M10")
                        expected_thread_depth = task_parameter.get(THREAD_DEPTH, 10.0)
                        expected_model_thread = task_parameter.get(MODEL_THREAD, True)

                        actual_disk_radius = result[DISK_RADIUS]
                        actual_disk_height = result[DISK_HEIGHT]
                        actual_thread_size = result[THREAD_SIZE]
                        actual_thread_depth = result[THREAD_DEPTH]
                        actual_model_thread = result[MODEL_THREAD]
                        actual_has_thread = result[HAS_THREAD]
                        actual_is_centered = result[IS_CENTERED]

                        # Log key parameters
                        logger.info(f"Task parameter check:")
                        logger.info(f"Expected disk: radius={expected_disk_radius}, height={expected_disk_height}")
                        logger.info(f"Expected threaded hole: Size={expected_thread_size}, depth={expected_thread_depth}")
                        logger.info(f"Expected model thread: {expected_model_thread}")
                        
                        logger.info(f"Actual disk: radius={actual_disk_radius}, height={actual_disk_height}")
                        logger.info(f"Actual threaded hole: Size={actual_thread_size}, depth={actual_thread_depth}")
                        logger.info(f"Actual model thread: {actual_model_thread}")
                        logger.info(f"Has thread: {actual_has_thread}, Is centered: {actual_is_centered}")

                        try:
                            # Try to get numeric part (handling possible units)
                            def get_float_value(value):
                                if isinstance(value, str) and ' ' in value:
                                    return float(value.split()[0])
                                return float(value)
                            
                            actual_disk_radius_value = get_float_value(actual_disk_radius)
                            actual_disk_height_value = get_float_value(actual_disk_height)
                            actual_thread_depth_value = get_float_value(actual_thread_depth)
                            
                            # Allow a certain margin of error (0.01%)
                            disk_radius_error = abs((actual_disk_radius_value - expected_disk_radius) / expected_disk_radius) <= 0.0001
                            disk_height_error = abs((actual_disk_height_value - expected_disk_height) / expected_disk_height) <= 0.0001
                            thread_depth_error = abs((actual_thread_depth_value - expected_thread_depth) / expected_thread_depth) <= 0.0001
                            
                            # Check if thread parameters match
                            def compare_str(actual, expected):
                                return actual.strip().lower() == expected.strip().lower()
                                
                            thread_size_correct = compare_str(actual_thread_size, expected_thread_size)
                            model_thread_correct = actual_model_thread == expected_model_thread
                            
                            is_centered_correct = actual_is_centered
                            has_thread_correct = actual_has_thread
                        except Exception as e:
                            logger.error(f"Parameter comparison error: {str(e)}")
                            disk_radius_error = False
                            disk_height_error = False
                            thread_size_correct = False
                            thread_depth_error = False
                            model_thread_correct = False
                            is_centered_correct = False
                            has_thread_correct = False
                        
                        disk_correct = disk_radius_error and disk_height_error
                        thread_correct = (thread_size_correct and thread_depth_error and 
                                         model_thread_correct and has_thread_correct)
                        hole_correct = is_centered_correct
                        
                        if disk_correct and hole_correct and thread_correct:
                            # Update second key step status
                            updates.append({
                                'status': 'key_step',
                                'index': 2,
                                'name': 'Created disk with threaded hole and saved successfully'
                            })
                            
                            # Task completed successfully
                            updates.append({
                                'status': 'success',
                                'reason': 'Successfully created a disk with threaded hole according to requirements and saved it'
                            })
                        else:
                            logger.warning(f"Parameter validation failed: " + 
                                          f"Disk correct: {disk_correct}, " +
                                          f"Hole position correct: {hole_correct}, " +
                                          f"Thread correct: {thread_correct}")
                
            elif event_type == ERROR:
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Record error event
                updates.append({
                    'status': 'error',
                    'type': error_type,
                    'message': error_message
                })
                
    elif message.get('type') == 'error':
        logger.error(f"Hook script error: {message.get('stack', '')}")
        
        # Record error event
        updates.append({
            'status': 'error',
            'type': 'script_error',
            'message': message.get('stack', 'Unknown error')
        })
    
    return updates if updates else None

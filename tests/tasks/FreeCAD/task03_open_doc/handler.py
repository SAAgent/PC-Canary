#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FreeCAD Event Handler
Responsible for handling events generated by hook scripts and updating evaluation metrics
"""

import os
from typing import Dict, Any, Optional, List

# Event type constants
SCRIPT_INITIALIZED = "script_initialized"
FUNCTION_NOT_FOUND = "function_not_found"
FUNCTION_FOUND = "function_found"
FUNCTION_CALLED = "function_called"
FUNCTION_KEY_WORD_DETECTED = "function_key_word_detected"
ERROR = "error"
HOOK_INSTALLED = "hook_installed"

# Constants definition
SOURCE_PATH = "source_path"
KEY = "filename"

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from hook script

    Args:
        message: Frida message object
        logger: Logger object for logging
        task_parameter: Task parameters

    Returns:
        Optional[List[Dict[str, Any]]]: List of status dictionaries or None
    """
    # Process message
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        # Check if contains event type
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Received event: {event_type}")
            
            # List for status updates to return
            updates = []
            
            # Handle specific events
            if event_type == SCRIPT_INITIALIZED:
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                
            elif event_type == FUNCTION_FOUND:
                logger.info(f"Function found: {payload.get('address', '')}")
                # No longer mark this as a key step
                
            elif event_type == FUNCTION_CALLED: 
                logger.info(f"Function called: {payload.get('message', '')}")
                # No longer mark this as a key step
                
            elif event_type == FUNCTION_KEY_WORD_DETECTED:
                log_info = f"Function detected keyword: {payload.get('message', '')}"
                logger.info(log_info)

                source_path = task_parameter.get(SOURCE_PATH, '')
                expected_key = source_path + task_parameter.get(KEY, '')
                key = payload.get('filename', '')
                logger.debug(f"Expected keyword: {expected_key}, Actual keyword: {key}")

                if key and os.path.exists(expected_key):
                    # This is the only key step
                    updates.append({
                        'status': 'key_step',
                        'index': 1,
                    })
                    
                    # Mark task as successful
                    updates.append({
                        'status': 'success',
                        'reason': f"Successfully opened document: {key}"
                    })
                    
                    logger.info(f"Task completed successfully! Document opened: {key}")
                
            elif event_type == ERROR:
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Report error
                updates.append({
                    'status': 'error',
                    'type': error_type,
                    'message': error_message
                })
            
            # If there are status updates, return them
            if updates:
                return updates
                
    elif message.get('type') == 'error':
        logger.error(f"Hook script error: {message.get('stack', '')}")
        return [{
            'status': 'error',
            'type': 'script_error',
            'message': f"Hook script error: {message.get('description', 'Unknown error')}", 
            'stack_trace': message.get('stack', '')
        }]
    
    return None
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FreeCAD Pyramid with Mirror Feature Event Handler
Responsible for processing events generated by the hook script and updating evaluation metrics
"""

from typing import Dict, Any, Optional, List

# Event type constants
SCRIPT_INITIALIZED = "script_initialized"
FUNCTION_NOT_FOUND = "function_not_found"
FUNCTION_FOUND = "function_found"
FUNCTION_CALLED = "function_called"
FUNCTION_KEY_WORD_DETECTED = "function_key_word_detected"
ERROR = "error"
HOOK_INSTALLED = "hook_installed"

# Keyword-related constants
BASE_LENGTH = "base_length"
BASE_WIDTH = "base_width"
PYRAMID_HEIGHT = "pyramid_height"
MIRROR_PLANE = "mirror_plane"
HAS_MIRROR = "has_mirror"

def execute_python_code(code: str, logger: Any) -> Dict[str, Any]:
    """
    Execute Python code and return the result
    
    Args:
        code: Python code to execute
        logger: Logger for recording events
        
    Returns:
        Dict[str, Any]: Execution result
    """
    try:
        # Create a new namespace to execute the code
        namespace = {}
        exec(code, namespace)
        result = namespace.get('result', None)
        
        if result is None:
            logger.warning("Pyramid with mirror feature object not found")
            return None
            
        # Validate result format
        required_keys = [
            BASE_LENGTH, BASE_WIDTH, PYRAMID_HEIGHT, MIRROR_PLANE, HAS_MIRROR
        ]
        if not all(key in result for key in required_keys):
            logger.error(f"Result missing required keys: {required_keys}")
            return None
            
        return result
    except Exception as e:
        logger.error(f"Error executing Python code: {str(e)}")
        return None

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from the hook script
    
    Args:
        message: Frida message object
        logger: Logger for recording events
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: List of status updates, or None if no updates
    """
    updates = []
    
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Received event: {event_type}")
            
            if event_type == SCRIPT_INITIALIZED:
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                
            elif event_type == FUNCTION_FOUND:
                logger.info(f"Function found: {payload.get('address', '')}")
                
            elif event_type == FUNCTION_CALLED:
                logger.info(f"Function called: {payload.get('message', '')}")
                # Update first key step status
                updates.append({
                    'status': 'key_step',
                    'index': 1,
                    'name': 'Document saved'
                })
                
            elif event_type == FUNCTION_KEY_WORD_DETECTED:
                # Execute Python code and get results
                code = payload.get('code', '')
                filename = payload.get('filename', '')
                expected_path = task_parameter.get("source_path", "") + task_parameter.get("filename", "")
                logger.info(f"Key content detected, document path: {filename}, expected document path: {expected_path}")
                
                if filename == expected_path:
                    result = execute_python_code(code, logger)
                    if result:
                        # Check if pyramid parameters match expectations
                        expected_base_length = task_parameter.get(BASE_LENGTH, 50.0)
                        expected_base_width = task_parameter.get(BASE_WIDTH, 50.0)
                        expected_pyramid_height = task_parameter.get(PYRAMID_HEIGHT, 30.0)
                        expected_mirror_plane = task_parameter.get(MIRROR_PLANE, "XZ")

                        actual_base_length = result[BASE_LENGTH]
                        actual_base_width = result[BASE_WIDTH]
                        actual_pyramid_height = result[PYRAMID_HEIGHT]
                        actual_mirror_plane = result[MIRROR_PLANE]
                        actual_has_mirror = result[HAS_MIRROR]

                        # Log key parameters
                        logger.info(f"Task parameter check: Expected pyramid base length={expected_base_length}, base width={expected_base_width}, height={expected_pyramid_height}")
                        logger.info(f"Expected mirror plane: {expected_mirror_plane}")
                        logger.info(f"Actual parameters: Actual pyramid base length={actual_base_length}, base width={actual_base_width}, height={actual_pyramid_height}")
                        logger.info(f"Actual mirror plane: {actual_mirror_plane}, has mirror: {actual_has_mirror}")

                        try:
                            # Try to get the numerical part (handling possible units)
                            actual_base_length_value = float(str(actual_base_length).split()[0]) if isinstance(actual_base_length, str) else float(actual_base_length)
                            actual_base_width_value = float(str(actual_base_width).split()[0]) if isinstance(actual_base_width, str) else float(actual_base_width)
                            actual_pyramid_height_value = float(str(actual_pyramid_height).split()[0]) if isinstance(actual_pyramid_height, str) else float(actual_pyramid_height)
                            
                            # Update validation logic to support pyramids created through wedge
                            # The base of the wedge is on the XZ plane, but dimensions may need adjusted interpretation
                            if actual_base_length_value > 0 and actual_base_width_value > 0 and actual_pyramid_height_value > 0:
                                # Relax validation standards, allow larger dimensional errors
                                base_length_error = abs((actual_base_length_value - expected_base_length) / expected_base_length) <= 0.1
                                
                                # For pyramids created as wedges, width and height might be swapped
                                # Check both possibilities: normal match or swapped dimensions
                                normal_width_match = abs((actual_base_width_value - expected_base_width) / expected_base_width) <= 0.1
                                height_as_width_match = abs((actual_base_width_value - expected_pyramid_height) / expected_pyramid_height) <= 0.1
                                normal_height_match = abs((actual_pyramid_height_value - expected_pyramid_height) / expected_pyramid_height) <= 0.1
                                width_as_height_match = abs((actual_pyramid_height_value - expected_base_width) / expected_base_width) <= 0.1
                                
                                # If either matching method is correct, consider it right
                                base_width_error = normal_width_match or height_as_width_match
                                pyramid_height_error = normal_height_match or width_as_height_match
                                
                                logger.info(f"Dimension validation: Length match={base_length_error}, normal width match={normal_width_match}, height as width match={height_as_width_match}")
                                logger.info(f"Dimension validation: Normal height match={normal_height_match}, width as height match={width_as_height_match}")
                                
                                # For pyramids created as wedges on XZ plane, assume mirror plane is XZ
                                mirror_plane_correct = True
                                has_mirror_correct = actual_has_mirror
                            else:
                                base_length_error = False
                                base_width_error = False
                                pyramid_height_error = False
                                mirror_plane_correct = False
                                has_mirror_correct = False
                        except Exception as e:
                            logger.error(f"Parameter comparison error: {str(e)}")
                            base_length_error = False
                            base_width_error = False
                            pyramid_height_error = False
                            mirror_plane_correct = False
                            has_mirror_correct = False
                        
                        pyramid_correct = base_length_error and base_width_error and pyramid_height_error
                        mirror_correct = mirror_plane_correct and has_mirror_correct
                        
                        if pyramid_correct and mirror_correct:
                            # Update second key step status
                            updates.append({
                                'status': 'key_step',
                                'index': 2,
                                'name': 'Created pyramid with mirror feature and saved successfully'
                            })
                            
                            # Task completed successfully
                            updates.append({
                                'status': 'success',
                                'reason': 'Successfully created a pyramid with mirror feature meeting requirements and saved'
                            })
                        else:
                            logger.warning(f"Parameter validation failed: " + 
                                          f"Pyramid correct: {pyramid_correct}, " +
                                          f"Mirror feature correct: {mirror_correct}")
                
            elif event_type == ERROR:
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Record error event
                updates.append({
                    'status': 'error',
                    'type': error_type,
                    'message': error_message
                })
                
    elif message.get('type') == 'error':
        logger.error(f"Hook script error: {message.get('stack', '')}")
        
        # Record error event
        updates.append({
            'status': 'error',
            'type': 'script_error',
            'message': message.get('stack', 'Unknown error')
        })
    
    return updates if updates else None

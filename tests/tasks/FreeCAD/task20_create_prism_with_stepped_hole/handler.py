#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FreeCAD Triangular Prism with Stepped Hole Event Handler
Responsible for processing events generated by the hook script and updating evaluation metrics
"""

from typing import Dict, Any, Optional, List

# Event type constants
SCRIPT_INITIALIZED = "script_initialized"
FUNCTION_NOT_FOUND = "function_not_found"
FUNCTION_FOUND = "function_found"
FUNCTION_CALLED = "function_called"
FUNCTION_KEY_WORD_DETECTED = "function_key_word_detected"
ERROR = "error"
HOOK_INSTALLED = "hook_installed"

# Keyword-related constants
PRISM_CIRCUMRADIUS = "prism_circumradius"
PRISM_HEIGHT = "prism_height"
HOLE_INNER_RADIUS = "hole_inner_radius"
HOLE_OUTER_RADIUS = "hole_outer_radius"
HOLE_DEPTH = "hole_depth"
INNER_HOLE_THROUGH = "inner_hole_through"


def execute_python_code(code: str, logger: Any) -> Dict[str, Any]:
    """
    Execute Python code and return the result
    
    Args:
        code: Python code to execute
        logger: Logger for recording events
        
    Returns:
        Dict[str, Any]: Execution result
    """
    try:
        # Create a new namespace to execute the code
        namespace = {}
        exec(code, namespace)
        result = namespace.get('result', None)
        
        if result is None:
            logger.warning("Triangular prism with stepped hole object not found")
            return None
            
        # Validate result format
        required_keys = [
            PRISM_CIRCUMRADIUS, PRISM_HEIGHT, HOLE_INNER_RADIUS, HOLE_OUTER_RADIUS, HOLE_DEPTH, INNER_HOLE_THROUGH
        ]
        if not all(key in result for key in required_keys):
            logger.error(f"Result missing required keys: {required_keys}")
            return None
            
        return result
    except Exception as e:
        logger.error(f"Error executing Python code: {str(e)}")
        return None


def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from the hook script
    
    Args:
        message: Frida message object
        logger: Logger for recording events
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: List of status updates, or None if no updates
    """
    updates = []
    
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Received event: {event_type}")
            
            if event_type == SCRIPT_INITIALIZED:
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                
            elif event_type == FUNCTION_FOUND:
                logger.info(f"Function found: {payload.get('address', '')}")
                
            elif event_type == FUNCTION_CALLED:
                logger.info(f"Function called: {payload.get('message', '')}")
                # Update first key step status
                updates.append({
                    'status': 'key_step',
                    'index': 1,
                    'name': 'Document saved'
                })
                
            elif event_type == FUNCTION_KEY_WORD_DETECTED:
                # Execute Python code and get results
                code = payload.get('code', '')
                filename = payload.get('filename', '')
                expected_path = task_parameter.get("source_path", "") + task_parameter.get("filename", "")
                logger.info(f"Key content detected, document path: {filename}, expected document path: {expected_path}")
                
                if filename == expected_path:
                    result = execute_python_code(code, logger)
                    if result:
                        # Check if prism parameters match expectations
                        expected_prism_circumradius = task_parameter.get(PRISM_CIRCUMRADIUS, 35.0)
                        expected_prism_height = task_parameter.get(PRISM_HEIGHT, 40.0)
                        expected_hole_inner_radius = task_parameter.get(HOLE_INNER_RADIUS, 5.0)
                        expected_hole_outer_radius = task_parameter.get(HOLE_OUTER_RADIUS, 10.0)
                        expected_hole_depth = task_parameter.get(HOLE_DEPTH, 15.0)
                        expected_inner_hole_through = task_parameter.get(INNER_HOLE_THROUGH, True)

                        actual_prism_circumradius = result[PRISM_CIRCUMRADIUS]
                        actual_prism_height = result[PRISM_HEIGHT]
                        actual_hole_inner_radius = result[HOLE_INNER_RADIUS]
                        actual_hole_outer_radius = result[HOLE_OUTER_RADIUS]
                        actual_hole_depth = result[HOLE_DEPTH]
                        actual_inner_hole_through = result[INNER_HOLE_THROUGH]

                        # Log key parameters
                        logger.info(f"Task parameter check: Expected prism circumradius={expected_prism_circumradius}, height={expected_prism_height}")
                        logger.info(f"Expected stepped hole inner radius={expected_hole_inner_radius}, outer radius={expected_hole_outer_radius}, depth={expected_hole_depth}")
                        logger.info(f"Expected inner hole through: {expected_inner_hole_through}")
                        logger.info(f"Actual parameters: Actual prism circumradius={actual_prism_circumradius}, height={actual_prism_height}")
                        logger.info(f"Actual stepped hole inner radius={actual_hole_inner_radius}, outer radius={actual_hole_outer_radius}, depth={actual_hole_depth}")
                        logger.info(f"Actual inner hole through: {actual_inner_hole_through}")

                        # Validate parameters
                        # Directly compare circumradius and height
                        prism_correct = (abs(actual_prism_circumradius - expected_prism_circumradius) <= 1.0 and
                                        abs(actual_prism_height - expected_prism_height) <= 1.0)
                        hole_correct = (abs(actual_hole_inner_radius - expected_hole_inner_radius) <= 0.5 and
                                        abs(actual_hole_outer_radius - expected_hole_outer_radius) <= 0.5 and
                                        abs(actual_hole_depth - expected_hole_depth) <= 1.0 and
                                        actual_inner_hole_through == expected_inner_hole_through)

                        if prism_correct and hole_correct:
                            # Update second key step status
                            updates.append({
                                'status': 'key_step',
                                'index': 2,
                                'name': 'Created triangular prism with stepped hole and saved successfully'
                            })
                            
                            # Task completed successfully
                            updates.append({
                                'status': 'success',
                                'reason': 'Successfully created a triangular prism with a stepped hole meeting requirements and saved'
                            })
                        else:
                            logger.warning(f"Parameter validation failed: " + 
                                          f"Prism correct: {prism_correct}, " +
                                          f"Stepped hole correct: {hole_correct}")
                
            elif event_type == ERROR:
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Record error event
                updates.append({
                    'status': 'error',
                    'type': error_type,
                    'message': error_message
                })
                
    elif message.get('type') == 'error':
        logger.error(f"Hook script error: {message.get('stack', '')}")
        
        # Record error event
        updates.append({
            'status': 'error',
            'type': 'script_error',
            'message': message.get('stack', 'Unknown error')
        })
    
    return updates if updates else None

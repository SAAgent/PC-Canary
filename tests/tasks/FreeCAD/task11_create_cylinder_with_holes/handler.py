#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FreeCAD Cylinder with Holes Event Handler
Handles events generated by the hook script and updates evaluation metrics
"""

from typing import Dict, Any, Optional, List
import math

# Event type constants
SCRIPT_INITIALIZED = "script_initialized"
FUNCTION_NOT_FOUND = "function_not_found"
FUNCTION_FOUND = "function_found"
FUNCTION_CALLED = "function_called"
FUNCTION_KEY_WORD_DETECTED = "function_key_word_detected"
ERROR = "error"
HOOK_INSTALLED = "hook_installed"

# Keyword-related constants
CYLINDER_RADIUS = "cylinder_radius"
CYLINDER_HEIGHT = "cylinder_height"
HOLE_RADIUS = "hole_radius"
HOLE_COUNT = "hole_count"

def execute_python_code(code: str, logger: Any) -> Dict[str, Any]:
    """
    Execute Python code and return results
    
    Args:
        code: Python code to execute
        logger: Logger instance
        
    Returns:
        Dict[str, Any]: Execution results
    """
    try:
        # Create a new namespace to execute the code
        namespace = {}
        exec(code, namespace)
        result = namespace.get('result', None)
        
        if result is None:
            logger.warning("Cylinder with holes object not found")
            return None
            
        # Validate result format
        required_keys = [CYLINDER_RADIUS, CYLINDER_HEIGHT, HOLE_RADIUS, HOLE_COUNT]
        if not all(key in result for key in required_keys):
            logger.error(f"Result missing required keys: {required_keys}")
            return None
            
        return result
    except Exception as e:
        logger.error(f"Error executing Python code: {str(e)}")
        return None

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Handle messages received from hook script
    
    Args:
        message: Frida message object
        logger: Logger instance
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: List of status updates, None if no updates
    """
    updates = []
    
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Received event: {event_type}")
            
            if event_type == SCRIPT_INITIALIZED:
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                
            elif event_type == FUNCTION_FOUND:
                logger.info(f"Function found: {payload.get('address', '')}")
                
            elif event_type == FUNCTION_CALLED:
                logger.info(f"Function called: {payload.get('message', '')}")
                # Update first key step status
                updates.append({
                    'status': 'key_step',
                    'index': 1,
                    'name': 'Save document'
                })
                
            elif event_type == FUNCTION_KEY_WORD_DETECTED:
                # Execute Python code and get results
                code = payload.get('code', '')
                filename = payload.get('filename', '')
                expected_path = task_parameter.get("source_path", "") + task_parameter.get("filename", "")
                logger.info(f"Keyword detected, document path: {filename}, expected path: {expected_path}")
                
                if filename == expected_path:
                    result = execute_python_code(code, logger)
                    if result:
                        # Check if cylinder with holes parameters match expectations
                        expected_cylinder_radius = task_parameter.get(CYLINDER_RADIUS, 10)
                        expected_cylinder_height = task_parameter.get(CYLINDER_HEIGHT, 20)
                        expected_hole_radius = task_parameter.get(HOLE_RADIUS, 2)
                        expected_hole_count = task_parameter.get(HOLE_COUNT, 2)

                        actual_cylinder_radius = result[CYLINDER_RADIUS]
                        actual_cylinder_height = result[CYLINDER_HEIGHT]
                        actual_hole_radius = result[HOLE_RADIUS]
                        actual_hole_count = result[HOLE_COUNT]

                        # Log key parameters (these are necessary information, not debugging)
                        logger.info(f"Task parameter check: Expected cylinder radius {expected_cylinder_radius}, Expected cylinder height {expected_cylinder_height}, " +
                                    f"Expected hole radius {expected_hole_radius}, Expected hole count {expected_hole_count}")
                        logger.info(f"Actual parameter check: Actual cylinder radius {actual_cylinder_radius}, Actual cylinder height {actual_cylinder_height}, " +
                                    f"Actual hole radius {actual_hole_radius}, Actual hole count {actual_hole_count}")

                        # Convert values that might have units to float
                        try:
                            # Try to get numeric part (handle possible units)
                            actual_cylinder_radius_value = float(str(actual_cylinder_radius).split()[0]) if isinstance(actual_cylinder_radius, str) else float(actual_cylinder_radius)
                            actual_cylinder_height_value = float(str(actual_cylinder_height).split()[0]) if isinstance(actual_cylinder_height, str) else float(actual_cylinder_height)
                            actual_hole_radius_value = float(str(actual_hole_radius).split()[0]) if isinstance(actual_hole_radius, str) else float(actual_hole_radius)
                            
                            # Allow small error margin (0.01%)
                            cylinder_radius_error = abs((actual_cylinder_radius_value - expected_cylinder_radius) / expected_cylinder_radius) <= 0.0001
                            cylinder_height_error = abs((actual_cylinder_height_value - expected_cylinder_height) / expected_cylinder_height) <= 0.0001
                            hole_radius_error = abs((actual_hole_radius_value - expected_hole_radius) / expected_hole_radius) <= 0.0001
                            hole_count_correct = actual_hole_count == expected_hole_count
                        except Exception as e:
                            logger.error(f"Parameter comparison error: {str(e)}")
                            cylinder_radius_error = False
                            cylinder_height_error = False
                            hole_radius_error = False
                            hole_count_correct = False
                        
                        # Check if holes are positioned correctly
                        position_correct = True
                        
                        # Get hole position information
                        hole_positions = result.get('hole_positions', [])
                        cylinder_position = result.get('cylinder_position', {'x': 0, 'y': 0, 'z': 0})
                        
                        if hole_positions and len(hole_positions) >= 2 and cylinder_position:
                            # Check 1: Are holes evenly distributed along height
                            cylinder_center_x = cylinder_position.get('x', 0)
                            cylinder_center_y = cylinder_position.get('y', 0)
                            
                            # If there are multiple holes, check if they are evenly distributed along height
                            if len(hole_positions) > 1:
                                # Sort holes by z coordinate
                                sorted_holes = sorted(hole_positions, key=lambda p: p.get('z', 0))
                                
                                # Calculate height differences between adjacent holes
                                height_diffs = []
                                for i in range(1, len(sorted_holes)):
                                    height_diff = sorted_holes[i].get('z', 0) - sorted_holes[i-1].get('z', 0)
                                    height_diffs.append(height_diff)
                                
                                # Check if height differences are uniform (0.1% tolerance)
                                if height_diffs and len(height_diffs) > 0:
                                    avg_height_diff = sum(height_diffs) / len(height_diffs)
                                    if avg_height_diff == 0:
                                        position_correct = False
                                    else:
                                        height_uniformity = all(
                                            abs((diff - avg_height_diff) / avg_height_diff) <= 0.001 
                                            for diff in height_diffs
                                        )
                                        if not height_uniformity:
                                            logger.warning("Holes are not evenly distributed along height")
                                            position_correct = False
                            
                            # Check 2: Are holes maintaining same horizontal distance from cylinder axis
                            horizontal_distances = []
                            for hole in hole_positions:
                                hole_x = hole.get('x', 0)
                                hole_y = hole.get('y', 0)
                                
                                # Calculate horizontal distance (to cylinder center axis)
                                horizontal_distance = math.sqrt(
                                    (hole_x - cylinder_center_x)**2 + 
                                    (hole_y - cylinder_center_y)**2
                                )
                                horizontal_distances.append(horizontal_distance)
                            
                            # Check if all holes have same horizontal distance (0.1% tolerance)
                            if horizontal_distances and len(horizontal_distances) > 0:
                                avg_distance = sum(horizontal_distances) / len(horizontal_distances)
                                if avg_distance > 0:
                                    distance_uniformity = all(
                                        abs((dist - avg_distance) / avg_distance) <= 0.001 
                                        for dist in horizontal_distances
                                    )
                                    
                                    if not distance_uniformity:
                                        logger.warning("Holes are not maintaining consistent distance from cylinder center axis")
                                        position_correct = False
                                else:
                                    logger.warning("Hole horizontal distance is 0, cannot verify distribution")
                                    position_correct = False
                            if not position_correct:
                                logger.info(f"Hole position distribution validation failed: {hole_positions}")
                        elif expected_hole_count > 1:
                            logger.warning("Could not get enough hole position information for distribution validation")
                            position_correct = False
                        
                        # Check all conditions
                        if cylinder_radius_error and cylinder_height_error and hole_radius_error and hole_count_correct and position_correct:
                            # Update second key step status
                            updates.append({
                                'status': 'key_step',
                                'index': 2,
                                'name': 'Cylinder with holes created and saved successfully'
                            })
                            
                            # Task completed successfully
                            updates.append({
                                'status': 'success',
                                'reason': 'Successfully created and saved a cylinder with holes meeting requirements'
                            })
                        else:
                            failure_reasons = []
                            if not cylinder_radius_error:
                                failure_reasons.append("Incorrect cylinder radius")
                            if not cylinder_height_error:
                                failure_reasons.append("Incorrect cylinder height")
                            if not hole_radius_error:
                                failure_reasons.append("Incorrect hole radius")
                            if not hole_count_correct:
                                failure_reasons.append("Incorrect hole count")
                            if not position_correct:
                                failure_reasons.append("Hole distribution does not meet requirements")
                            
                            logger.warning(f"Parameter validation failed: {', '.join(failure_reasons)}")
                
            elif event_type == ERROR:
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Record error event
                updates.append({
                    'status': 'error',
                    'type': error_type,
                    'message': error_message
                })
                
    elif message.get('type') == 'error':
        logger.error(f"Hook script error: {message.get('stack', '')}")
        
        # Record error event
        updates.append({
            'status': 'error',
            'type': 'script_error',
            'message': message.get('stack', 'Unknown error')
        })
    
    return updates if updates else None
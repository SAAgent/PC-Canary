#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
QGIS New Project Creation Event Handler
Responsible for processing events generated by hook scripts and updating evaluation metrics
"""

import os
from typing import Dict, Any, Optional, List

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from hook scripts
    
    Args:
        message: Frida message object
        logger: Logger
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: Return status list if task status is updated, otherwise return None
    """

    # Process message
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        # Check if event type is included
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Received event: {event_type}")
            
            # Handle specific events
            if event_type == "script_initialized":
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                return None
                
            elif event_type == "clear_function_found":
                logger.info(f"Found new project creation function: {payload.get('address', '')}")
                return None
                
            elif event_type == "setPath_function_found":
                logger.info(f"Found project save function: {payload.get('address', '')}")
                return None
                
            elif event_type == "newProject_created":
                logger.info(f"New project creation detected")
                
                # Return key step
                return [{"status": "key_step", "index": 1, "name": "New project creation successful"}]
                
            elif event_type == "newProject_saved":
                path = payload.get("path", "")
                logger.info(f"Project saving detected: Path={path}")
                
                # Check if path matches expectation
                expected_path = task_parameter.get("save_path", "").lower()
                
                path_matches = expected_path in path.lower() or os.path.basename(expected_path) in path.lower()
                
                if path_matches:
                    logger.info("Save path matches expected target!")                    
                    # Return key step and success status (all steps completed)
                    return [
                        {"status": "key_step", "index": 2, "name": "New project save successful"},
                        {"status": "success", "reason": f"Successfully created and saved new project: Path={path}"}
                    ]
                else:
                    logger.info(f"Save path doesn't match expectation. Expected path: {expected_path}, Actual: {path}")
                
            elif event_type == "error":
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Return error status
                return [{
                    "status": "error",
                    "type": error_type,
                    "message": error_message
                }]
                
    elif message.get('type') == 'error':
        stack = message.get('stack', '')
        logger.error(f"Hook script error: {stack}")
        
        # Return error status
        return [{
            "status": "error",
            "type": "script_error",
            "message": "Hook script execution error",
            "stack_trace": stack
        }]
    
    return None

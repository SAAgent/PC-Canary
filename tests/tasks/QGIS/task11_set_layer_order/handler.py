#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
QGIS Layer Order Adjustment Event Handler
Responsible for processing events generated by hook scripts and updating evaluation metrics
"""

import os
from typing import Dict, Any, Optional, List

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from hook scripts
    
    Args:
        message: Frida message object
        logger: Logger object
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: Returns status list if task status is updated, otherwise None
    """

    # Process message
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        # Check if event type is included
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Event received: {event_type}")
            
            # Handle specific events
            if event_type == "script_initialized":
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                return None
                
            elif event_type == "setOrder_function_found":
                logger.info(f"Found layer order setting function: {payload.get('address', '')}")
                return None
                
            elif event_type == "order_set":
                layer_names = payload.get("layer_names", [])
                order_string = payload.get("order_string", "")
                count = payload.get("layer_count", 0)
                
                logger.info(f"Detected layer order change: {count} layers, order: {order_string}")
                
                # Check if layer order matches expectation
                expected_order = task_parameter.get("LayerOrder", "").strip()
                expected_layers = [layer.strip() for layer in expected_order.split(",")]
                
                logger.debug(f"Comparing layer order - Detected: {layer_names}, Expected: {expected_layers}")
                
                # Determine if detected layer order matches expectation
                # Compare layer names to see if they contain expected names, order must also match
                match = True
                if len(layer_names) >= len(expected_layers):
                    for i, expected_layer in enumerate(expected_layers):
                        found = False
                        for actual_layer in layer_names:
                            if expected_layer.lower() in actual_layer.lower():
                                found = True
                                # Ensure order matches
                                if layer_names.index(actual_layer) != i:
                                    logger.info(f"Layer {expected_layer} order does not match")
                                    match = False
                                break
                        if not found:
                            logger.info(f"Expected layer not found: {expected_layer}")
                            match = False
                else:
                    logger.info(f"Layer count does not match. Expected: at least {len(expected_layers)} layers, Actual: {len(layer_names)} layers")
                    match = False
                
                if match:
                    logger.info("Layer order matches expectation!")                    
                    # Return key step and success status
                    return [
                        {"status": "key_step", "index": 1, "name": "Expected layer order set"},
                        {"status": "success", "reason": f"Successfully set layer order: {order_string}"}
                    ]
                else:
                    logger.info(f"Layer order does not match expectation. Expected: {expected_order}, Actual: {order_string}")
                
            elif event_type == "error":
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Return error status
                return [{
                    "status": "error",
                    "type": error_type,
                    "message": error_message
                }]
                
    elif message.get('type') == 'error':
        stack = message.get('stack', '')
        logger.error(f"Hook script error: {stack}")
        
        # Return error status
        return [{
            "status": "error",
            "type": "script_error",
            "message": "Hook script execution error",
            "stack_trace": stack
        }]
    
    return None

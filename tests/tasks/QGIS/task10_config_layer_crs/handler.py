#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
QGIS Layer CRS Configuration Event Handler
Responsible for processing events generated by hook scripts and updating evaluation metrics
"""

from typing import Dict, Any, Optional, List

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from hook scripts
    
    Args:
        message: Frida message object
        logger: Logger object
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: Returns status list if task status is updated, otherwise None
    """

    # Process message
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        # Check if event type is included
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Event received: {event_type}")
            
            # Handle specific events
            if event_type == "script_initialized":
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                return None
                
            elif event_type == "modifyCrs_function_found":
                logger.info(f"Found setCrs function: {payload.get('address', '')}")
                return None
                
            elif event_type == "layerName_found":
                detected_layer = payload.get("name", "")
                logger.info(f"Detected operation on layer: {detected_layer}")
                
                # Check if layer name matches expectation
                expected_layer = task_parameter.get("layer_name", "")
                
                # Determine if detected layer name matches expectation
                if expected_layer.lower() in detected_layer.lower():
                    logger.info("Layer name matches expected target!")                    
                    # Return key step
                    return [{"status": "key_step", "index": 1, "name": "Operating on expected layer"}]
                else:
                    logger.info(f"Layer name does not match expectation. Expected: {expected_layer}, Actual: {detected_layer}")
                
            elif event_type == "newCrs_detected":
                layer_name = payload.get("layer", "")
                detected_crs = payload.get("crs", "")
                logger.info(f"Detected CRS change for layer {layer_name} to: {detected_crs}")
                
                # Check if CRS matches expectation
                expected_crs = task_parameter.get("crs", "")
                expected_layer = task_parameter.get("layer_name", "")
                
                # Determine if detected CRS and layer both match expectations
                crs_match = str(expected_crs) == str(detected_crs)
                layer_match = expected_layer.lower() in layer_name.lower()
                
                if crs_match and layer_match:
                    logger.info(f"CRS change matches expectation! Layer: {layer_name}, CRS: {detected_crs}")                    
                    # Return key step and success status
                    return [
                        {"status": "key_step", "index": 2, "name": "CRS successfully set"},
                        {"status": "success", "reason": f"Successfully set coordinate reference system for layer {layer_name} to {detected_crs}"}
                    ]
                else:
                    if not crs_match:
                        logger.info(f"CRS does not match expectation. Expected: {expected_crs}, Actual: {detected_crs}")
                    if not layer_match:
                        logger.info(f"Layer does not match expectation. Expected: {expected_layer}, Actual: {layer_name}")
                
            elif event_type == "error":
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Return error status
                return [{
                    "status": "error",
                    "type": error_type,
                    "message": error_message
                }]
                
    elif message.get('type') == 'error':
        stack = message.get('stack', '')
        logger.error(f"Hook script error: {stack}")
        
        # Return error status
        return [{
            "status": "error",
            "type": "script_error",
            "message": "Hook script execution error",
            "stack_trace": stack
        }]
    
    return None

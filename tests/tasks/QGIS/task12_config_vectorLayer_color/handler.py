#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
QGIS Vector Layer Color Configuration Event Handler
Responsible for processing events generated by hook scripts and updating evaluation metrics
"""

import os
from typing import Dict, Any, Optional, List

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from hook scripts
    
    Args:
        message: Frida message object
        logger: Logger object
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: Returns status list if task status is updated, otherwise None
    """

    # Process message
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        # Check if event type is included
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Event received: {event_type}")
            
            # Handle specific events
            if event_type == "script_initialized":
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                return None
                
            elif event_type == "set_function_found":
                logger.info(f"Found color setting function: {payload.get('address', '')}")
                return None
                
            elif event_type == "layer_set":
                layer_name = payload.get("name", "")
                logger.info(f"Detected layer color setting: {layer_name}")
                
                # Check if layer name matches expectation
                expected_layer_name = task_parameter.get("LayerName", "")
                logger.debug(f"Comparing layer names - Detected: {layer_name}, Expected: {expected_layer_name}")
                
                # Determine if detected layer name matches expectation
                if expected_layer_name.lower() in layer_name.lower():
                    logger.info("Layer name for color setting matches expected target!")                    
                    # Return key step
                    return [{"status": "key_step", "index": 1, "name": "Operating on expected layer"}]
                else:
                    logger.info(f"Layer name for color setting does not match expectation. Expected: {expected_layer_name}, Actual: {layer_name}")
                
            elif event_type == "color_set":
                layer_name = payload.get("layer", "")
                color_hex = payload.get("color", "")
                rgba = payload.get("rgba", {})
                
                logger.info(f"Detected color setting for layer {layer_name}: {color_hex}")
                
                # Check if layer name and color match expectations
                expected_layer_name = task_parameter.get("LayerName", "")
                expected_color = task_parameter.get("color", "").lower()
                
                # Normalize color format (remove '#' prefix, convert to lowercase)
                detected_color = color_hex.lower().replace("#", "")
                expected_color = expected_color.lower().replace("#", "")
                
                # Determine if detected color matches expectation
                layer_match = expected_layer_name.lower() in layer_name.lower()
                color_match = detected_color == expected_color
                
                if layer_match and color_match:
                    logger.info(f"Layer color setting matches expectation! Layer: {layer_name}, Color: {color_hex}")                    
                    # Return key step and success status
                    return [
                        {"status": "key_step", "index": 2, "name": "Expected color set"},
                        {"status": "success", "reason": f"Successfully set layer {layer_name} color to {color_hex}"}
                    ]
                else:
                    if not layer_match:
                        logger.info(f"Layer does not match expectation. Expected: {expected_layer_name}, Actual: {layer_name}")
                    if not color_match:
                        logger.info(f"Color does not match expectation. Expected: #{expected_color}, Actual: {color_hex}")
                
            elif event_type == "error":
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Return error status
                return [{
                    "status": "error",
                    "type": error_type,
                    "message": error_message
                }]
                
    elif message.get('type') == 'error':
        stack = message.get('stack', '')
        logger.error(f"Hook script error: {stack}")
        
        # Return error status
        return [{
            "status": "error",
            "type": "script_error",
            "message": "Hook script execution error",
            "stack_trace": stack
        }]
    
    return None

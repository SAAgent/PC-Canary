#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
QGIS Project CRS Configuration Event Handler
Responsible for processing events generated by hook scripts and updating evaluation metrics
"""

from typing import Dict, Any, Optional, List

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from the hook script
    
    Args:
        message: Frida message object
        logger: Logger
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: Returns a list of status updates if task status has changed, otherwise None
    """

    # Process message
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        # Check if event type is included
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Received event: {event_type}")
            
            # Process specific events
            if event_type == "script_initialized":
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                return None
                
            elif event_type == "setCrs_function_found":
                logger.info(f"Found setCrs function: {payload.get('address', '')}")
                return None
                
            elif event_type == "newCrs_detected":
                detected_crs = payload.get("crs", "")
                logger.info(f"CRS change detected: {detected_crs}")
                
                # Check if CRS matches expected
                expected_crs = task_parameter.get("crs", "2964")
                
                # Determine if detected CRS matches expectation
                if str(expected_crs) == str(detected_crs):
                    logger.info("CRS matches target expectation!")                    
                    # Return key step and success status
                    return [
                        {"status": "key_step", "index": 1, "name": "CRS successfully set"},
                        {"status": "success", "reason": f"Successfully set coordinate reference system to {detected_crs}"}
                    ]
                
            elif event_type == "error":
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Return error status
                return [{
                    "status": "error",
                    "type": error_type,
                    "message": error_message
                }]
                
    elif message.get('type') == 'error':
        stack = message.get('stack', '')
        logger.error(f"Hook script error: {stack}")
        
        # Return error status
        return [{
            "status": "error",
            "type": "script_error",
            "message": "Hook script execution error",
            "stack_trace": stack
        }]
    
    return None

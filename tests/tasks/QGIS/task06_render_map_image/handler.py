#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
QGIS Map Image Export Event Handler
Responsible for processing events generated by hook scripts and updating evaluation metrics
"""

import os
import re
from typing import Dict, Any, Optional, List

def message_handler(message: Dict[str, Any], logger: Any, task_parameter: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
    """
    Process messages received from hook scripts
    
    Args:
        message: Frida message object
        logger: Logger
        task_parameter: Task parameters
        
    Returns:
        Optional[List[Dict[str, Any]]]: Return status list if task status is updated, otherwise return None
    """

    # Process message
    if message.get('type') == 'send' and 'payload' in message:
        payload = message['payload']
        
        # Check if event type is included
        if 'event' in payload:
            event_type = payload['event']
            logger.debug(f"Received event: {event_type}")
            
            # Handle specific events
            if event_type == "script_initialized":
                logger.info(f"Hook script initialized: {payload.get('message', '')}")
                return None
                
            elif event_type == "setPathandType_function_found":
                logger.info(f"Found path and type setting function: {payload.get('address', '')}")
                return None
                
            elif event_type == "setSize_function_found":
                logger.info(f"Found size setting function: {payload.get('address', '')}")
                return None
                
            elif event_type == "PathandType_set":
                path = payload.get("path", "")
                file_type = payload.get("type", "")
                logger.info(f"Image export settings detected: Path={path}, Type={file_type}")
                
                # Check if path matches expectation
                expected_path = task_parameter.get("save_path", "").lower()
                expected_type = task_parameter.get("type", "").lower()
                
                path_matches = expected_path in path.lower() or os.path.basename(expected_path) in path.lower()
                
                # Type might be included in filter string, like "PNG Files (*.png)"
                type_matches = expected_type in file_type.lower()
                
                if path_matches and type_matches:
                    logger.info("Export path and type match expected targets!")                    
                    # Return key step
                    return [{"status": "key_step", "index": 1, "name": "Image path and type are correct"}]
                else:
                    logger.info(f"Export settings don't match expectations. Expected path: {expected_path}, Actual: {path}; Expected type: {expected_type}, Actual: {file_type}")
                
            elif event_type == "Size_set":
                width = payload.get("width", 0)
                height = payload.get("height", 0)
                logger.info(f"Image export size detected: Width={width}px, Height={height}px")
                
                # Check if size matches expectation
                expected_width = int(task_parameter.get("width", "0"))
                expected_height = int(task_parameter.get("height", "0"))
                
                if width == expected_width and height == expected_height:
                    logger.info("Export size matches expected target!")                    
                    # Return key step and success status (all steps completed)
                    return [
                        {"status": "key_step", "index": 2, "name": "Image size is correct"},
                        {"status": "success", "reason": f"Successfully exported map image: Path matches, Size={width}x{height}"}
                    ]
                else:
                    logger.info(f"Export size doesn't match expectations. Expected: {expected_width}x{expected_height}, Actual: {width}x{height}")
                
            elif event_type == "error":
                error_type = payload.get("error_type", "unknown")
                error_message = payload.get("message", "Unknown error")
                logger.error(f"Hook script error ({error_type}): {error_message}")
                
                # Return error status
                return [{
                    "status": "error",
                    "type": error_type,
                    "message": error_message
                }]
                
    elif message.get('type') == 'error':
        stack = message.get('stack', '')
        logger.error(f"Hook script error: {stack}")
        
        # Return error status
        return [{
            "status": "error",
            "type": "script_error",
            "message": "Hook script execution error",
            "stack_trace": stack
        }]
    
    return None
